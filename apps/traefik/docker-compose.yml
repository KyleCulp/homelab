version: '3.7'
networks:
  traefik_proxy:
    external: true
  socket_proxy:
    external: true
services:
 
  traefik:
    image: traefik:v3.0
    container_name: traefik
    restart: unless-stopped
    ports:
      - target: 80
        published: 80
        protocol: tcp
        mode: host
      - target: 443
        published: 443
        protocol: tcp
        mode: host
    networks:
      - default
      - traefik_proxy
    environment:
      - CLOUDFLARE_EMAIL=${CLOUDFLARE_EMAIL}
      - CLOUDFLARE_API_KEY=${CLOUDFLARE_API_KEY}
    command:
      - --accessLog.filePath=/var/log/access.log
      - --accessLog.filters.statusCodes=400-499
      # - --providers.docker.endpoint=unix:///var/run/docker.sock # unsafe but oh well
      - --providers.docker.exposedByDefault=false
      - --api.dashboard=true # <== Enabling the dashboard to view services, middlewares, routers, etc.
      - --api.debug=true # <== Enabling additional endpoints for debugging and profiling
      - --log.level=DEBUG # <== Setting the level of the logs from traefik
      - --providers.docker=true # <== Enabling docker as the provider for traefik
      - --providers.docker.exposedbydefault=false # <== Don't expose every container to traefik
      - --providers.docker.network=traefik_proxy
      # - --providers.file.filename=/dynamic.yaml # <== Referring to a dynamic configuration file
      - --entryPoints.http.address=:80
      - --entryPoints.https.address=:443
      - --entrypoints.https.forwardedHeaders.trustedIPs=173.245.48.0/20,103.21.244.0/22,103.22.200.0/22,103.31.4.0/22,141.101.64.0/18,108.162.192.0/18,190.93.240.0/20,188.114.96.0/20,197.234.240.0/22,198.41.128.0/17,162.158.0.0/15,104.16.0.0/12,172.64.0.0/13,131.0.72.0/22
      - --providers.docker.network=web # <== Operate on the docker network named web
      - --entrypoints.https.http.tls.certresolver=cloudflare
      - --entrypoints.https.http.tls.domains[0].main=${DOMAINNAME}
      - --entrypoints.https.http.tls.domains[0].sans=*.${DOMAINNAME}
      - --providers.file.directory=/rules # Load dynamic configuration from one or more .toml or .yml files in a directory
      - --providers.file.watch=true # Only works on top level files in the rules folder
      - --certificatesResolvers.cloudflare.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory # LetsEncrypt Staging Server - uncomment when testing
      - --certificatesResolvers.cloudflare.acme.email=${CLOUDFLARE_EMAIL}
      - --certificatesResolvers.cloudflare.acme.storage=/acme.json
      - --certificatesResolvers.cloudflare.acme.dnsChallenge.provider=cloudflare
      - --certificatesResolvers.cloudflare.acme.dnsChallenge.resolvers=1.1.1.1:53,1.0.0.1:53
      - --certificatesResolvers.cloudflare.acme.dnsChallenge.delayBeforeCheck=90 # To delay DNS check and reduce LE hitrate
    volumes:
      - ${VOLUMEDIR}/traefik/traefik.log:/traefik.log
      - ${VOLUMEDIR}/traefik/acme.json:/etc/traefik/acme/acme.json
      - ${VOLUMEDIR}/traefik/certs:/certs
      # - ${VOLUMEDIR}/traefik/rules:/rules
      - /var/run/docker.sock:/var/run/docker.sock
      # # create these toml files first
      # - ${VOLUMEDIR}/traefik/traefik.toml:/etc/traefik/traefik.toml:ro
      # - ${VOLUMEDIR}/traefik/rules.toml:/etc/traefik/rules.toml:ro
      # - ${VOLUMEDIR}/traefik/log:/var/log
      # - ${VOLUMEDIR}/shared:/shared
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.entrypoints=https"
      - "traefik.http.routers.traefik.rule=Host(`traefik.${DOMAINNAME}`)"
      - "traefik.http.routers.traefik.service=api@internal"
      - "traefik.http.services.traefik.loadbalancer.server.port=8080"
      # - "traefik.http.middlewares.test-auth.basicauth.usersfile=/shared/.htpasswd"
      # Global http-->https
      - "traefik.http.routers.http-catchall.entrypoints=http"
      - "traefik.http.routers.http-catchall.rule=HostRegexp(`{host:.+}`)"
      - "traefik.http.routers.http-catchall.middlewares=redirect-to-https"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"

  socket-proxy:
    container_name: socket-proxy
    image: tecnativa/docker-socket-proxy:latest
    restart: unless-stopped
    networks:
      - socket_proxy
    privileged: true
    ports:
      - "2375:2375"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    environment:
      - LOG_LEVEL=info # debug,info,notice,warning,err,crit,alert,emerg
      ## Variables match the URL prefix (i.e. AUTH blocks access to /auth/* parts of the API, etc.).
      # 0 to revoke access.
      # 1 to grant access.
      ## Granted by Default
      - EVENTS=1
      - PING=1
      - VERSION=1
      ## Revoked by Default
      # Security critical
      - AUTH=0
      - SECRETS=0
      # Not always needed
      - BUILD=0
      - COMMIT=0
      - CONFIGS=0
      - CONTAINERS=1 # Traefik, portainer, etc.
      - DISTRIBUTION=0
      - EXEC=0
      - IMAGES=1 # Portainer
      - INFO=1 # Portainer
      - NETWORKS=1 # Portainer
      - NODES=0
      - PLUGINS=0
      - SERVICES=1 # Portainer
      - SESSION=0
      - SWARM=0
      - SYSTEM=0
      - TASKS=1 # Portaienr
      - VOLUMES=1 # Portainer

  # traefik-certdumper:
  #   container_name: traefik-certdumper
  #   image: humenius/traefik-certs-dumper:latest
  #   volumes:
  #     - ${VOLUMEDIR}/traefik:/traefik:ro
  #     - ${VOLUMEDIR}/shared/certs:/output:rw
  #   environment:
  #     DOMAIN: ${DOMAINNAME}